<EditForm Model="@userWithCredentials" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
    @if (User is not null)
    {

        <DataAnnotationsValidator />

        <FormSection Title="Informacion Basica">

            <div class="row mb-3">
                <FormFieldSet Width="col-3" Label="Foto del Empleado">

                    <img src="@GetImagePath()" style="width:12rem; height:12rem; display:block; border-radius:1rem; margin-bottom:1rem; object-fit: cover;">

                    <UserPictureUpload @ref="userPictureUploadRef" OnFileUploaded="HandleFileUpload" OnFilePreviewReady="HandleFilePreview" UploadComponentStyle="@HandlingUploadStyles()" ID_USER="@User.ID_USER" />

                    @if (IsEdit && User?.IMAGE_NAME != null)
                    {

                        <button type="button" class="btn btn-danger mt-2" @onclick="RemoveImage" style="width: 8rem;">Quitar Imagen</button>
                    }

                </FormFieldSet>
            </div>

            <div class="row mb-3">

                <FormFieldSet Width="col-md-6" Label="Nombre Completo">

                    <InputText id="Nombre Completo" class="form-control" @bind-Value="User.NAME" />
                    <ValidationMessage For="() => User.NAME" />

                </FormFieldSet>


                <FormFieldSet Width="col-md-6" Label="Departamento">

                    <InputSelect id="Departamento" class="form-control" @bind-Value="User.DEPT">
                        @if (DepartmentsList is not null)
                        {
                            @foreach (var dept in DepartmentsList)
                            {
                                <option value="@dept">@dept</option>
                            }
                        }

                    </InputSelect>
                    <ValidationMessage For="() => User.DEPT" />

                </FormFieldSet>



            </div>


            <div class="row mb-3">
                <div class="col-md-6">

                    <input class="form-check-input" type="radio" name="radioGroup" id="radio1" value="option1">
                    <label class="form-check-label" for="radio1">Masculino</label>
                    <input class="form-check-input" type="radio" name="radioGroup" id="radio2" value="option2">
                    <label class="form-check-label" for="radio2">Femenino</label>

                </div>

            </div>


            <div class="row mb-3">
                <FormFieldSet Width="col-md-6" Label="Puesto">

                    <InputText id="Puesto" class="form-control" @bind-Value="User.POSITION" />
                    <ValidationMessage For="() => User.POSITION" />

                </FormFieldSet>


                <FormFieldSet Width="col-md-6" Label="Fecha de Ingreso">

                    <InputDate id="Fecha de Ingreso" class="form-control" @bind-Value="User.ENTRY_DATE" />
                    <ValidationMessage For="() => User.ENTRY_DATE" />

                </FormFieldSet>

            </div>


            <div class="row mb-3">
                <FormFieldSet Width="col-2" Label="Numero de Empleado">

                    <InputNumber id="Numero de Empleado" class="form-control" @bind-Value="User.ID_USER" />
                    <ValidationMessage For="() => User.ID_USER" />

                </FormFieldSet>



            </div>


        

        </FormSection>

    }

    @if (Credentials is not null)
    {

        <FormSection Title="Credenciales de Usuario">

            <FormFieldSet Width="col-md-6" Label="Nombre Completo">

                <InputText id="Nombre Completo" class="form-control" @bind-Value="Credentials.PORTAL_USER" />
                <ValidationMessage For="() => Credentials.PORTAL_USER" />

            </FormFieldSet>

        </FormSection>



    }


    <div class="mt-3">
        @if (IsEdit)
        {
            <button type="submit" class="btn btn-primary" disabled="@IsBusy">Actualizar</button>
            <button type="button" class="btn btn-secondary" @onclick="HandleCancel" disabled="@IsBusy">Cancelar</button>
        }
        else
        {
            <button type="submit" class="btn btn-primary" disabled="@IsBusy">Agregar Usuario</button>
        }
    </div>

</EditForm>


@code {
    [Parameter]
    public User? User { get; set; }

    [Parameter]
    public UserCredentials? Credentials { get; set; }


    private UserWithCredentials userWithCredentials = new UserWithCredentials();

    [Parameter]
    public string[]? DepartmentsList { get; set; }

    [Parameter]
    public bool IsBusy { get; set; }

    [Parameter]
    public bool IsEdit { get; set; }

    [Parameter]
    public EventCallback<bool> OnSubmit { get; set; }


    [Parameter]
    public EventCallback<bool> OnCancel { get; set; }

    private string? imageFilePath;

    private string? base64ImagePreview;

    private UserPictureUpload? userPictureUploadRef;


    private string? UploadStyles;


    protected override void OnInitialized()
    {
        // Populate userWithCredentials instance
        userWithCredentials.User = this.User;
        userWithCredentials.Credentials = this.Credentials;
    }

    private void HandleFileUpload(string path)
    {
        imageFilePath = path;
        Console.WriteLine("Ruta de la imagen: " + imageFilePath);
        // Aquí puede a signar imageFilePath al modelo de usuario, si es necesario
        if (User is not null)
        {
            User.IMAGE_NAME = imageFilePath;
        }

    }


    private void HandleFilePreview(string base64String)
    {
        base64ImagePreview = base64String;
    }

    private string GetImagePath()
    {

        if (!string.IsNullOrEmpty(base64ImagePreview))
        {
            return base64ImagePreview;
        }
        else if (User?.IMAGE_NAME is not null)
        {
            return $"/Images/{User.IMAGE_NAME}";
        }
        else
        {
            return $"/Images/default.svg";
        }
    }

    private void RemoveImage()
    {
        base64ImagePreview = null;
        imageFilePath = null;
        if (User is not null)
        {
            User.IMAGE_NAME = null;
        }
        userPictureUploadRef?.ClearingFile();
    }

    private string HandlingUploadStyles()
    {
        return
        (!string.IsNullOrEmpty(base64ImagePreview) || (User?.IMAGE_NAME is not null && User.IMAGE_NAME != "default.svg"))
        ? "Cambiar" : "Agregar";
    }


    private async Task HandleValidSubmit()
    {
        if (userPictureUploadRef != null)
        {
            await userPictureUploadRef.SubmitImage();
        }

        // Actualizar User.IMAGE_NAME sólo si imageFilePath tiene un valor
        if (User != null && !string.IsNullOrEmpty(imageFilePath))
        {
            User.IMAGE_NAME = imageFilePath;
        }

        if (OnSubmit.HasDelegate)
        {
            await OnSubmit.InvokeAsync(true);
        }

    }

    private async Task HandleInvalidSubmit()
    {
        if (OnSubmit.HasDelegate)
        {
            await OnSubmit.InvokeAsync(false);
        }
    }

    private async Task HandleCancel()
    {
        if (OnCancel.HasDelegate)
        {
            await OnCancel.InvokeAsync();
        }

    }
}
